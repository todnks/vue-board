{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelDynamic as _vModelDynamic, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"base-input\"\n};\nvar _hoisted_2 = {\n  \"class\": \"base-input__placeholder\"\n};\nvar _hoisted_3 = [\"type\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"span\", _hoisted_2, _toDisplayString($props.placeholder), 1\n  /* TEXT */\n  ), _withDirectives(_createElementVNode(\"input\", {\n    type: $props.type,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $setup.input = $event;\n    }),\n    onInput: _cache[1] || (_cache[1] = function () {\n      return $setup.update && $setup.update.apply($setup, arguments);\n    })\n  }, null, 40\n  /* PROPS, HYDRATE_EVENTS */\n  , _hoisted_3), [[_vModelDynamic, $setup.input]])]);\n}","map":{"version":3,"mappings":";;EACO,SAAM;;;EACH,SAAM;;;;uBADdA,oBAGM,KAHN,cAGM,CAFJC,oBAA8D,MAA9D,cAA8DC,iBAArBC,kBAAqB,CAA9D,EAAoD;EAAA;EAApD,CAEI,kBADJF,oBAAqD,OAArD,EAAqD;IAA7CG,IAAI,EAAED,WAAuC;;aAAxBE,eAAKC;MAAmB;IAAhBC,OAAK;MAAA,OAAEF,uDAAF;IAAA;EAAW,CAArD;;EAAA,iCAA6BA,eACzB,CAHN","names":["_createElementBlock","_createElementVNode","_toDisplayString","$props","type","$setup","$event","onInput"],"sourceRoot":"","sources":["/Users/se-uggim/Desktop/vue-crud-board/src/components/BInput.vue"],"sourcesContent":["<template>\n  <div class=\"base-input\">\n    <span class=\"base-input__placeholder\">{{ placeholder }}</span>\n    <input :type=\"type\" v-model=\"input\" @input=\"update\" >\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\n\nexport default {\n  props: {\n    modelValue: String,\n    placeholder: {\n      type: String,\n      default: '',\n    },\n    type: {\n      type: String,\n      default: 'text',\n    },\n  },\n  setup(props, { emit }) {\n    let input = ref(props.modelValue);\n    const update = () => {\n      emit('update:modelValue', input.value);\n    };\n\n    return {\n      input,\n      update,\n    };\n  },\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}